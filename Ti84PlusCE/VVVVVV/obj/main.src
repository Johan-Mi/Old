; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT CODE
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	
;    6	#include <math.h>
;    7	#include <stdio.h>
;    8	#include <stdlib.h>
;    9	#include <string.h>
;   10	
;   11	#include <graphx.h>
;   12	#include <keypadc.h>
;   13	
;   14	#include "gfx/player_gfx.h"
;   15	#include "gfx/tiles_gfx.h"
;   16	
;   17	extern uint8_t mapData[];
;   18	
;   19	void main(void) {
_main:
	LD	HL,-251
	CALL	__frameset
;   20		sk_key_t key;
;   21		int player_x = 0;
	LD	BC,0
	LD	(IX+-7),BC
;   22		int player_y = 0;
;   23		bool player_x_subpixel = 0;
	LD	(IX+-1),0
;   24		bool flip_pressed = false;
	LD	(IX+-9),0
;   25		bool player_xdir = true;
	LD	(IX+-8),1
;   26	
;   27		int gravity = 1;
	LD	BC,1
	LD	(IX+-18),BC
;   28	
;   29		gfx_sprite_t* active_player_sprite = player;
	LD	BC,_player_data
	LD	(IX+-4),BC
;   30		gfx_UninitedSprite(player_buffer, player_width, player_height);
;   31	
;   32		gfx_tilemap_t tilemap;
;   33		tilemap.map = mapData;
	LD	BC,_mapData
	LD	(IX+-39),BC
;   34		tilemap.tiles = tiles_tiles;
	LD	BC,_tiles_tiles_data
	LD	(IX+-36),BC
;   35		tilemap.type_width = gfx_tile_8_pixel;
	LD	(IX+-29),3
;   36		tilemap.type_height = gfx_tile_8_pixel;
	LD	(IX+-28),3
;   37		tilemap.tile_width = 8;
	LD	(IX+-32),8
;   38		tilemap.tile_height = 8;
	LD	(IX+-33),8
;   39		tilemap.draw_width = 20;
	LD	(IX+-30),20
;   40		tilemap.width = 20;
	LD	(IX+-26),20
;   41		tilemap.draw_height = 14;
	LD	(IX+-31),14
;   42		tilemap.height = 14;
	LD	(IX+-27),14
;   43		tilemap.x_loc = 0;
	LD	BC,0
	LD	(IX+-24),BC
;   44		tilemap.y_loc = 0;
	LD	(IX+-25),0
;   45		
;   46		gfx_Begin();
	CALL	_gfx_Begin
;   47		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   48		gfx_SetPalette(tiles_gfx_pal, sizeof_tiles_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,_tiles_gfx_pal
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;   49	
;   50		while(!kb_IsDown(kb_KeyClear)) {
	JR	L_25
L_26:
;   51			gfx_ZeroScreen();
	CALL	_gfx_ZeroScreen
;   52			gfx_Tilemap_NoClip(&tilemap, 0, 0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PEA	IX+-39
	CALL	_gfx_Tilemap_NoClip
	POP	BC
	POP	BC
	POP	BC
;   53			gfx_Sprite(active_player_sprite, player_x, player_y);
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;   54			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;   55	
;   56			if(kb_IsDown(kb_KeyLeft)) {
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_16
;   57				player_x -= 1 + (player_x_subpixel ^= 1);
	LD	A,(IX+-1)
	XOR	A,1
	LD	(IX+-1),A
	UEXT	HL
	LD	L,A
	LD	BC,HL
	INC	BC
	OR	A,A
	LD	HL,(IX+-7)
	SBC	HL,BC
	LD	(IX+-7),HL
;   58				if(player_x < 0) {
	CALL	__icmpzero
	JP	P,L_6
;   59					player_x = 0;
	LD	BC,0
	LD	(IX+-7),BC
;   60					player_x_subpixel = 0;
	LD	(IX+-1),0
;   61				}
L_6:
;   62				if(player_xdir) {
	LD	A,(IX+-8)
	OR	A,A
	JR	Z,L_16
;   63					player_xdir = false;
	LD	(IX+-8),0
;   64					active_player_sprite = gfx_FlipSpriteY(active_player_sprite, (active_player_sprite == player ? player_buffer : player));
	LD	HL,(IX+-4)
	LD	BC,_player_data
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_3
	LD	HL,IX
	LD	BC,-251
	ADD	HL,BC
	LD	(IX+-15),HL
	JR	L_4
L_3:
	LD	(IX+-15),BC
L_4:
	LD	BC,(IX+-15)
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
	LD	(IX+-4),HL
;   65				}
;   66			}
L_16:
;   67			if(kb_IsDown(kb_KeyRight)) {
	LD	A,(16056350)
	AND	A,4
	JR	Z,L_24
;   68				player_x += 1 + (player_x_subpixel ^= 1);
	LD	A,(IX+-1)
	XOR	A,1
	LD	(IX+-1),A
	UEXT	HL
	LD	L,A
	INC	HL
	LD	BC,(IX+-7)
	ADD	HL,BC
	LD	(IX+-7),HL
;   69				if(player_x > LCD_WIDTH - player_data[0]) {
	LD	A,(_player_data)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	OR	A,A
	LD	BC,(IX+-7)
	SBC	HL,BC
	JP	P,L_14
;   70					player_x = LCD_WIDTH - player_data[0];
	LD	A,(_player_data)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	LD	(IX+-7),HL
;   71					player_x_subpixel = 0;
	LD	(IX+-1),0
;   72				}
L_14:
;   73				if(!player_xdir) {
	LD	A,(IX+-8)
	OR	A,A
	JR	NZ,L_24
;   74					active_player_sprite = gfx_FlipSpriteY(active_player_sprite, (active_player_sprite == player ? player_buffer : player));
	LD	BC,_player_data
	LD	HL,(IX+-4)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_11
	LD	HL,IX
	LD	BC,-251
	ADD	HL,BC
	LD	(IX+-21),HL
	JR	L_12
L_11:
	LD	(IX+-21),BC
L_12:
	LD	BC,(IX+-21)
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
	LD	(IX+-4),HL
;   75					player_xdir = true;
	LD	(IX+-8),1
;   76				}
;   77			}
L_24:
;   78			if(kb_IsDown(kb_Key2nd)) {
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_23
;   79				if(!flip_pressed) {
	LD	A,(IX+-9)
	OR	A,A
	JR	NZ,L_25
;   80					gravity = -gravity;
	LD	HL,(IX+-18)
	CALL	__ineg
	LD	(IX+-18),HL
;   81					active_player_sprite = gfx_FlipSpriteX(active_player_sprite, (active_player_sprite == player_buffer ? player : player_buffer));
	LD	HL,IX
	LD	BC,-251
	ADD	HL,BC
	OR	A,A
	LD	BC,(IX+-4)
	SBC	HL,BC
	JR	NZ,L_19
	LD	BC,_player_data
	LD	(IX+-12),BC
	JR	L_20
L_19:
	LD	HL,IX
	LD	BC,-251
	ADD	HL,BC
	LD	(IX+-12),HL
L_20:
	LD	BC,(IX+-12)
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_gfx_FlipSpriteX
	POP	BC
	POP	BC
	LD	(IX+-4),HL
;   82					flip_pressed = true;
	LD	(IX+-9),1
;   83				}
;   84			} else
	JR	L_25
L_23:
;   85				flip_pressed = false;
	LD	(IX+-9),0
;   86		}
L_25:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_26
;   87	
;   88		gfx_End();
	CALL	_gfx_End
;   89	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_gfx_FlipSpriteX                    IMPORT  -----   function
;_gfx_FlipSpriteY                    IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_Sprite                         IMPORT  -----   function
;_gfx_Tilemap_NoClip                 IMPORT  -----   function
;_gfx_ZeroScreen                     IMPORT  -----   function
;_tiles_gfx_pal                      IMPORT     12   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_tiles_tiles_data                   IMPORT     60   variable
;_mapData                            IMPORT  unknown variable
;_player_data                        IMPORT    212   variable
;player_buffer_data                  IX-251    212   variable
;tilemap                              IX-39     18   variable
;temp9                                IX-21      3   variable
;gravity                              IX-18      3   variable
;temp1                                IX-15      3   variable
;temp17                               IX-12      3   variable
;flip_pressed                          IX-9      1   variable
;player_xdir                           IX-8      1   variable
;player_x                              IX-7      3   variable
;active_player_sprite                  IX-4      3   variable
;player_x_subpixel                     IX-1      1   variable


; Stack Frame Size: 257 (bytes)
;       Spill Code: 0 (instruction)


	XREF _mapData:ROM
	XREF _tiles_gfx_pal:ROM
	XREF _tiles_tiles_data:ROM
	XREF _player_data:ROM
	XREF _gfx_FlipSpriteY:ROM
	XREF _gfx_FlipSpriteX:ROM
	XREF _gfx_Sprite:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_ZeroScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_Tilemap_NoClip:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF __ineg:ROM
	XREF __frameset:ROM
	XREF __icmpzero:ROM
	XDEF _main
	END
